// Models.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Foundation

protocol JSONEncodable {
    func encodeToJSON() -> Any
}

public enum ErrorResponse : Error {
    case Error(Int, Data?, Error)
}

open class Response<T> {
    open let statusCode: Int
    open let header: [String: String]
    open let body: T?

    public init(statusCode: Int, header: [String: String], body: T?) {
        self.statusCode = statusCode
        self.header = header
        self.body = body
    }

    public convenience init(response: HTTPURLResponse, body: T?) {
        let rawHeader = response.allHeaderFields
        var header = [String:String]()
        for (key, value) in rawHeader {
            header[key as! String] = value as? String
        }
        self.init(statusCode: response.statusCode, header: header, body: body)
    }
}

private var once = Int()
class Decoders {
    static fileprivate var decoders = Dictionary<String, ((AnyObject) -> AnyObject)>()

    static func addDecoder<T>(clazz: T.Type, decoder: @escaping ((AnyObject) -> T)) {
        let key = "\(T.self)"
        decoders[key] = { decoder($0) as AnyObject }
    }

    static func decode<T>(clazz: T.Type, discriminator: String, source: AnyObject) -> T {
        let key = discriminator;
        if let decoder = decoders[key] {
            return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decode<T>(clazz: [T].Type, source: AnyObject) -> [T] {
        let array = source as! [AnyObject]
        return array.map { Decoders.decode(clazz: T.self, source: $0) }
    }

    static func decode<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject) -> [Key:T] {
        let sourceDictionary = source as! [Key: AnyObject]
        var dictionary = [Key:T]()
        for (key, value) in sourceDictionary {
            dictionary[key] = Decoders.decode(clazz: T.self, source: value)
        }
        return dictionary
    }

    static func decode<T>(clazz: T.Type, source: AnyObject) -> T {
        initialize()
        if T.self is Int32.Type && source is NSNumber {
            return source.int32Value as! T;
        }
        if T.self is Int64.Type && source is NSNumber {
            return source.int64Value as! T;
        }
        if T.self is UUID.Type && source is String {
            return UUID(uuidString: source as! String) as! T
        }
        if source is T {
            return source as! T
        }
        if T.self is Data.Type && source is String {
            return Data(base64Encoded: source as! String) as! T
        }

        let key = "\(T.self)"
        if let decoder = decoders[key] {
           return decoder(source) as! T
        } else {
            fatalError("Source \(source) is not convertible to type \(clazz): Maybe swagger file is insufficient")
        }
    }

    static func decodeOptional<T>(clazz: T.Type, source: AnyObject?) -> T? {
        if source is NSNull {
            return nil
        }
        return source.map { (source: AnyObject) -> T in
            Decoders.decode(clazz: clazz, source: source)
        }
    }

    static func decodeOptional<T>(clazz: [T].Type, source: AnyObject?) -> [T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    static func decodeOptional<T, Key: Hashable>(clazz: [Key:T].Type, source: AnyObject?) -> [Key:T]? {
        if source is NSNull {
            return nil
        }
        return source.map { (someSource: AnyObject) -> [Key:T] in
            Decoders.decode(clazz: clazz, source: someSource)
        }
    }

    private static var __once: () = {
        let formatters = [
            "yyyy-MM-dd",
            "yyyy-MM-dd'T'HH:mm:ssZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ",
            "yyyy-MM-dd'T'HH:mm:ss'Z'",
            "yyyy-MM-dd'T'HH:mm:ss.SSS",
            "yyyy-MM-dd HH:mm:ss"
        ].map { (format: String) -> DateFormatter in
            let formatter = DateFormatter()
            formatter.dateFormat = format
            return formatter
        }
        // Decoder for Date
        Decoders.addDecoder(clazz: Date.self) { (source: AnyObject) -> Date in
           if let sourceString = source as? String {
                for formatter in formatters {
                    if let date = formatter.date(from: sourceString) {
                        return date
                    }
                }
            }
            if let sourceInt = source as? Int64 {
                // treat as a java date
                return Date(timeIntervalSince1970: Double(sourceInt / 1000) )
            }
            fatalError("formatter failed to parse \(source)")
        } 

        // Decoder for [CodeListResponse]
        Decoders.addDecoder(clazz: [CodeListResponse].self) { (source: AnyObject) -> [CodeListResponse] in
            return Decoders.decode(clazz: [CodeListResponse].self, source: source)
        }
        // Decoder for CodeListResponse
        Decoders.addDecoder(clazz: CodeListResponse.self) { (source: AnyObject) -> CodeListResponse in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CodeListResponse()
            instance.meta = Decoders.decodeOptional(clazz: MetaList.self, source: sourceDictionary["_meta"] as AnyObject?)
            instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"] as AnyObject?)
            return instance
        }


        // Decoder for [CouponListResponse]
        Decoders.addDecoder(clazz: [CouponListResponse].self) { (source: AnyObject) -> [CouponListResponse] in
            return Decoders.decode(clazz: [CouponListResponse].self, source: source)
        }
        // Decoder for CouponListResponse
        Decoders.addDecoder(clazz: CouponListResponse.self) { (source: AnyObject) -> CouponListResponse in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CouponListResponse()
            instance.meta = Decoders.decodeOptional(clazz: MetaList.self, source: sourceDictionary["_meta"] as AnyObject?)
            instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"] as AnyObject?)
            return instance
        }


        // Decoder for [CouponResponse]
        Decoders.addDecoder(clazz: [CouponResponse].self) { (source: AnyObject) -> [CouponResponse] in
            return Decoders.decode(clazz: [CouponResponse].self, source: source)
        }
        // Decoder for CouponResponse
        Decoders.addDecoder(clazz: CouponResponse.self) { (source: AnyObject) -> CouponResponse in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CouponResponse()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.created = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["created"] as AnyObject?)
            instance.cancelled = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["cancelled"] as AnyObject?)
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.value = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["value"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.type = Decoders.decodeOptional(clazz: CouponTypeResponse.self, source: sourceDictionary["type"] as AnyObject?)
            instance.fromUser = Decoders.decodeOptional(clazz: CouponUserResponse.self, source: sourceDictionary["from_user"] as AnyObject?)
            instance.toUser = Decoders.decodeOptional(clazz: CouponUserResponse.self, source: sourceDictionary["to_user"] as AnyObject?)
            instance.claimedCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["claimed_count"] as AnyObject?)
            return instance
        }


        // Decoder for [CouponTransactionListResponse]
        Decoders.addDecoder(clazz: [CouponTransactionListResponse].self) { (source: AnyObject) -> [CouponTransactionListResponse] in
            return Decoders.decode(clazz: [CouponTransactionListResponse].self, source: source)
        }
        // Decoder for CouponTransactionListResponse
        Decoders.addDecoder(clazz: CouponTransactionListResponse.self) { (source: AnyObject) -> CouponTransactionListResponse in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CouponTransactionListResponse()
            instance.meta = Decoders.decodeOptional(clazz: MetaList.self, source: sourceDictionary["_meta"] as AnyObject?)
            instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"] as AnyObject?)
            return instance
        }


        // Decoder for [CouponTransactionResponse]
        Decoders.addDecoder(clazz: [CouponTransactionResponse].self) { (source: AnyObject) -> [CouponTransactionResponse] in
            return Decoders.decode(clazz: [CouponTransactionResponse].self, source: source)
        }
        // Decoder for CouponTransactionResponse
        Decoders.addDecoder(clazz: CouponTransactionResponse.self) { (source: AnyObject) -> CouponTransactionResponse in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CouponTransactionResponse()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.created = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["created"] as AnyObject?)
            instance.amount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["amount"] as AnyObject?)
            if let type = sourceDictionary["type"] as? String { 
                instance.type = CouponTransactionResponse.ModelType(rawValue: (type))
            }
            
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.user = Decoders.decodeOptional(clazz: CouponUserResponse.self, source: sourceDictionary["user"] as AnyObject?)
            instance.coupon = Decoders.decodeOptional(clazz: CouponResponse.self, source: sourceDictionary["coupon"] as AnyObject?)
            return instance
        }


        // Decoder for [CouponTypeIssueRequest]
        Decoders.addDecoder(clazz: [CouponTypeIssueRequest].self) { (source: AnyObject) -> [CouponTypeIssueRequest] in
            return Decoders.decode(clazz: [CouponTypeIssueRequest].self, source: source)
        }
        // Decoder for CouponTypeIssueRequest
        Decoders.addDecoder(clazz: CouponTypeIssueRequest.self) { (source: AnyObject) -> CouponTypeIssueRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CouponTypeIssueRequest()
            instance.quantity = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["quantity"] as AnyObject?)
            instance.code = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code"] as AnyObject?)
            instance.value = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["value"] as AnyObject?)
            instance.fromUserId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from_user_id"] as AnyObject?)
            instance.toUserId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["to_user_id"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            return instance
        }


        // Decoder for [CouponTypeListResponse]
        Decoders.addDecoder(clazz: [CouponTypeListResponse].self) { (source: AnyObject) -> [CouponTypeListResponse] in
            return Decoders.decode(clazz: [CouponTypeListResponse].self, source: source)
        }
        // Decoder for CouponTypeListResponse
        Decoders.addDecoder(clazz: CouponTypeListResponse.self) { (source: AnyObject) -> CouponTypeListResponse in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CouponTypeListResponse()
            instance.meta = Decoders.decodeOptional(clazz: MetaList.self, source: sourceDictionary["_meta"] as AnyObject?)
            instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"] as AnyObject?)
            return instance
        }


        // Decoder for [CouponTypeResponse]
        Decoders.addDecoder(clazz: [CouponTypeResponse].self) { (source: AnyObject) -> [CouponTypeResponse] in
            return Decoders.decode(clazz: [CouponTypeResponse].self, source: source)
        }
        // Decoder for CouponTypeResponse
        Decoders.addDecoder(clazz: CouponTypeResponse.self) { (source: AnyObject) -> CouponTypeResponse in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CouponTypeResponse()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.created = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["created"] as AnyObject?)
            instance.cancelled = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["cancelled"] as AnyObject?)
            instance.expiry = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["expiry"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.value = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["value"] as AnyObject?)
            instance.reciprocalValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["reciprocal_value"] as AnyObject?)
            instance.fromRole = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from_role"] as AnyObject?)
            instance.toRole = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["to_role"] as AnyObject?)
            if let codeType = sourceDictionary["code_type"] as? String { 
                instance.codeType = CouponTypeResponse.CodeType(rawValue: (codeType))
            }
            
            instance.codePrefix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code_prefix"] as AnyObject?)
            instance.claimLimit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["claim_limit"] as AnyObject?)
            instance.issuedCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["issued_count"] as AnyObject?)
            if let applicability = sourceDictionary["applicability"] as? String { 
                instance.applicability = CouponTypeResponse.Applicability(rawValue: (applicability))
            }
            
            instance.fences = Decoders.decodeOptional(clazz: Geojson.self, source: sourceDictionary["fences"] as AnyObject?)
            return instance
        }


        // Decoder for [CouponTypeUpdateRequest]
        Decoders.addDecoder(clazz: [CouponTypeUpdateRequest].self) { (source: AnyObject) -> [CouponTypeUpdateRequest] in
            return Decoders.decode(clazz: [CouponTypeUpdateRequest].self, source: source)
        }
        // Decoder for CouponTypeUpdateRequest
        Decoders.addDecoder(clazz: CouponTypeUpdateRequest.self) { (source: AnyObject) -> CouponTypeUpdateRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CouponTypeUpdateRequest()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.expiry = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["expiry"] as AnyObject?)
            instance.value = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["value"] as AnyObject?)
            instance.reciprocalValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["reciprocal_value"] as AnyObject?)
            instance.fences = Decoders.decodeOptional(clazz: Geojson.self, source: sourceDictionary["fences"] as AnyObject?)
            return instance
        }


        // Decoder for [CouponUserClaimRequest]
        Decoders.addDecoder(clazz: [CouponUserClaimRequest].self) { (source: AnyObject) -> [CouponUserClaimRequest] in
            return Decoders.decode(clazz: [CouponUserClaimRequest].self, source: source)
        }
        // Decoder for CouponUserClaimRequest
        Decoders.addDecoder(clazz: CouponUserClaimRequest.self) { (source: AnyObject) -> CouponUserClaimRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CouponUserClaimRequest()
            instance.lat = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["lat"] as AnyObject?)
            instance.lng = Decoders.decodeOptional(clazz: Float.self, source: sourceDictionary["lng"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            return instance
        }


        // Decoder for [CouponUserCreateRequest]
        Decoders.addDecoder(clazz: [CouponUserCreateRequest].self) { (source: AnyObject) -> [CouponUserCreateRequest] in
            return Decoders.decode(clazz: [CouponUserCreateRequest].self, source: source)
        }
        // Decoder for CouponUserCreateRequest
        Decoders.addDecoder(clazz: CouponUserCreateRequest.self) { (source: AnyObject) -> CouponUserCreateRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CouponUserCreateRequest()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            instance.externalId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["external_id"] as AnyObject?)
            instance.role = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["role"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.balance = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["balance"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            return instance
        }


        // Decoder for [CouponUserListResponse]
        Decoders.addDecoder(clazz: [CouponUserListResponse].self) { (source: AnyObject) -> [CouponUserListResponse] in
            return Decoders.decode(clazz: [CouponUserListResponse].self, source: source)
        }
        // Decoder for CouponUserListResponse
        Decoders.addDecoder(clazz: CouponUserListResponse.self) { (source: AnyObject) -> CouponUserListResponse in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CouponUserListResponse()
            instance.meta = Decoders.decodeOptional(clazz: MetaList.self, source: sourceDictionary["_meta"] as AnyObject?)
            instance.data = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["data"] as AnyObject?)
            return instance
        }


        // Decoder for [CouponUserReciprocateRequest]
        Decoders.addDecoder(clazz: [CouponUserReciprocateRequest].self) { (source: AnyObject) -> [CouponUserReciprocateRequest] in
            return Decoders.decode(clazz: [CouponUserReciprocateRequest].self, source: source)
        }
        // Decoder for CouponUserReciprocateRequest
        Decoders.addDecoder(clazz: CouponUserReciprocateRequest.self) { (source: AnyObject) -> CouponUserReciprocateRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CouponUserReciprocateRequest()
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            return instance
        }


        // Decoder for [CouponUserResponse]
        Decoders.addDecoder(clazz: [CouponUserResponse].self) { (source: AnyObject) -> [CouponUserResponse] in
            return Decoders.decode(clazz: [CouponUserResponse].self, source: source)
        }
        // Decoder for CouponUserResponse
        Decoders.addDecoder(clazz: CouponUserResponse.self) { (source: AnyObject) -> CouponUserResponse in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CouponUserResponse()
            instance.id = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["id"] as AnyObject?)
            instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"] as AnyObject?)
            instance.created = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["created"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            instance.externalId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["external_id"] as AnyObject?)
            instance.role = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["role"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.balance = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["balance"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.couponCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["coupon_count"] as AnyObject?)
            instance.lastClaim = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["last_claim"] as AnyObject?)
            instance.lastTransaction = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["last_transaction"] as AnyObject?)
            return instance
        }


        // Decoder for [CouponUserTransactionRequest]
        Decoders.addDecoder(clazz: [CouponUserTransactionRequest].self) { (source: AnyObject) -> [CouponUserTransactionRequest] in
            return Decoders.decode(clazz: [CouponUserTransactionRequest].self, source: source)
        }
        // Decoder for CouponUserTransactionRequest
        Decoders.addDecoder(clazz: CouponUserTransactionRequest.self) { (source: AnyObject) -> CouponUserTransactionRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CouponUserTransactionRequest()
            instance.amount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["amount"] as AnyObject?)
            instance.reciprocate = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["reciprocate"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            return instance
        }


        // Decoder for [CouponUserUpdateRequest]
        Decoders.addDecoder(clazz: [CouponUserUpdateRequest].self) { (source: AnyObject) -> [CouponUserUpdateRequest] in
            return Decoders.decode(clazz: [CouponUserUpdateRequest].self, source: source)
        }
        // Decoder for CouponUserUpdateRequest
        Decoders.addDecoder(clazz: CouponUserUpdateRequest.self) { (source: AnyObject) -> CouponUserUpdateRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CouponUserUpdateRequest()
            instance.enabled = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["enabled"] as AnyObject?)
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.email = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["email"] as AnyObject?)
            instance.externalId = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["external_id"] as AnyObject?)
            instance.role = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["role"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.balance = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["balance"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            return instance
        }


        // Decoder for [CoupontTypeCreateRequest]
        Decoders.addDecoder(clazz: [CoupontTypeCreateRequest].self) { (source: AnyObject) -> [CoupontTypeCreateRequest] in
            return Decoders.decode(clazz: [CoupontTypeCreateRequest].self, source: source)
        }
        // Decoder for CoupontTypeCreateRequest
        Decoders.addDecoder(clazz: CoupontTypeCreateRequest.self) { (source: AnyObject) -> CoupontTypeCreateRequest in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = CoupontTypeCreateRequest()
            instance.name = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["name"] as AnyObject?)
            instance.value = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["value"] as AnyObject?)
            instance.fromRole = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["from_role"] as AnyObject?)
            instance.toRole = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["to_role"] as AnyObject?)
            instance.expiry = Decoders.decodeOptional(clazz: Date.self, source: sourceDictionary["expiry"] as AnyObject?)
            instance.description = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["description"] as AnyObject?)
            instance.tags = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["tags"] as AnyObject?)
            instance.reciprocalValue = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["reciprocal_value"] as AnyObject?)
            if let codeType = sourceDictionary["code_type"] as? String { 
                instance.codeType = CoupontTypeCreateRequest.CodeType(rawValue: (codeType))
            }
            
            instance.codePrefix = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["code_prefix"] as AnyObject?)
            instance.claimLimit = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["claim_limit"] as AnyObject?)
            if let applicability = sourceDictionary["applicability"] as? String { 
                instance.applicability = CoupontTypeCreateRequest.Applicability(rawValue: (applicability))
            }
            
            instance.fences = Decoders.decodeOptional(clazz: Geojson.self, source: sourceDictionary["fences"] as AnyObject?)
            return instance
        }


        // Decoder for [Geojson]
        Decoders.addDecoder(clazz: [Geojson].self) { (source: AnyObject) -> [Geojson] in
            return Decoders.decode(clazz: [Geojson].self, source: source)
        }
        // Decoder for Geojson
        Decoders.addDecoder(clazz: Geojson.self) { (source: AnyObject) -> Geojson in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = Geojson()
            if let type = sourceDictionary["type"] as? String { 
                instance.type = Geojson.ModelType(rawValue: (type))
            }
            
            instance.coordinates = Decoders.decodeOptional(clazz: Array.self, source: sourceDictionary["coordinates"] as AnyObject?)
            return instance
        }


        // Decoder for [InlineResponse400]
        Decoders.addDecoder(clazz: [InlineResponse400].self) { (source: AnyObject) -> [InlineResponse400] in
            return Decoders.decode(clazz: [InlineResponse400].self, source: source)
        }
        // Decoder for InlineResponse400
        Decoders.addDecoder(clazz: InlineResponse400.self) { (source: AnyObject) -> InlineResponse400 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InlineResponse400()
            instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            if let code = sourceDictionary["code"] as? String { 
                instance.code = InlineResponse400.Code(rawValue: (code))
            }
            
            return instance
        }


        // Decoder for [InlineResponse401]
        Decoders.addDecoder(clazz: [InlineResponse401].self) { (source: AnyObject) -> [InlineResponse401] in
            return Decoders.decode(clazz: [InlineResponse401].self, source: source)
        }
        // Decoder for InlineResponse401
        Decoders.addDecoder(clazz: InlineResponse401.self) { (source: AnyObject) -> InlineResponse401 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InlineResponse401()
            instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            if let code = sourceDictionary["code"] as? String { 
                instance.code = InlineResponse401.Code(rawValue: (code))
            }
            
            return instance
        }


        // Decoder for [InlineResponse403]
        Decoders.addDecoder(clazz: [InlineResponse403].self) { (source: AnyObject) -> [InlineResponse403] in
            return Decoders.decode(clazz: [InlineResponse403].self, source: source)
        }
        // Decoder for InlineResponse403
        Decoders.addDecoder(clazz: InlineResponse403.self) { (source: AnyObject) -> InlineResponse403 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InlineResponse403()
            instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            if let code = sourceDictionary["code"] as? String { 
                instance.code = InlineResponse403.Code(rawValue: (code))
            }
            
            return instance
        }


        // Decoder for [InlineResponse404]
        Decoders.addDecoder(clazz: [InlineResponse404].self) { (source: AnyObject) -> [InlineResponse404] in
            return Decoders.decode(clazz: [InlineResponse404].self, source: source)
        }
        // Decoder for InlineResponse404
        Decoders.addDecoder(clazz: InlineResponse404.self) { (source: AnyObject) -> InlineResponse404 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InlineResponse404()
            instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            if let code = sourceDictionary["code"] as? String { 
                instance.code = InlineResponse404.Code(rawValue: (code))
            }
            
            return instance
        }


        // Decoder for [InlineResponse409]
        Decoders.addDecoder(clazz: [InlineResponse409].self) { (source: AnyObject) -> [InlineResponse409] in
            return Decoders.decode(clazz: [InlineResponse409].self, source: source)
        }
        // Decoder for InlineResponse409
        Decoders.addDecoder(clazz: InlineResponse409.self) { (source: AnyObject) -> InlineResponse409 in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = InlineResponse409()
            instance.message = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["message"] as AnyObject?)
            if let code = sourceDictionary["code"] as? String { 
                instance.code = InlineResponse409.Code(rawValue: (code))
            }
            
            return instance
        }


        // Decoder for [MetaList]
        Decoders.addDecoder(clazz: [MetaList].self) { (source: AnyObject) -> [MetaList] in
            return Decoders.decode(clazz: [MetaList].self, source: source)
        }
        // Decoder for MetaList
        Decoders.addDecoder(clazz: MetaList.self) { (source: AnyObject) -> MetaList in
            let sourceDictionary = source as! [AnyHashable: Any]

            let instance = MetaList()
            instance.object = Decoders.decodeOptional(clazz: String.self, source: sourceDictionary["object"] as AnyObject?)
            instance.count = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["count"] as AnyObject?)
            instance.totalCount = Decoders.decodeOptional(clazz: Int32.self, source: sourceDictionary["total_count"] as AnyObject?)
            instance.hasMore = Decoders.decodeOptional(clazz: Bool.self, source: sourceDictionary["has_more"] as AnyObject?)
            return instance
        }
    }()

    static fileprivate func initialize() {
        _ = Decoders.__once
    }
}
