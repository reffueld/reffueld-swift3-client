//
// CouponUserAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit



open class CouponUserAPI: APIBase {
    /**

     - parameter id: (path) Unique ID of the user requested 
     - parameter code: (path) Unique coupon code 
     - parameter body: (body) Transaction object 
     - parameter X_IDEMPOTENCY_KEY: (header) The unique value of the key identifies the request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func claimCodeForUser(id: String, code: String, body: CouponUserClaimRequest, X_IDEMPOTENCY_KEY: String? = nil, completion: @escaping ((_ data: CouponTransactionResponse?,_ error: Error?) -> Void)) {
        claimCodeForUserWithRequestBuilder(id: id, code: code, body: body, X_IDEMPOTENCY_KEY: X_IDEMPOTENCY_KEY).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter id: (path) Unique ID of the user requested 
     - parameter code: (path) Unique coupon code 
     - parameter body: (body) Transaction object 
     - parameter X_IDEMPOTENCY_KEY: (header) The unique value of the key identifies the request (optional)
     - returns: Promise<CouponTransactionResponse>
     */
    open class func claimCodeForUser( id: String,  code: String,  body: CouponUserClaimRequest,  X_IDEMPOTENCY_KEY: String? = nil) -> Promise<CouponTransactionResponse> {
        let deferred = Promise<CouponTransactionResponse>.pending()
        claimCodeForUser(id: id, code: code, body: body, X_IDEMPOTENCY_KEY: X_IDEMPOTENCY_KEY) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     - POST /user/{id}/claim/{code}
     - Claim a single code for a specific user, resulting in a CLAIM type transaction.
     - API Key:
       - type: apiKey X-REFFUELD-APIKEY 
       - name: apiKeySecurity
     - examples: [{example={
  "amount" : 123,
  "id" : "aeiou",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "description" : "aeiou",
  "type" : "aeiou",
  "coupon" : {
    "id" : "aeiou",
    "claimed_count" : 123,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "description" : "aeiou",
    "from_user" : "",
    "value" : 123,
    "cancelled" : "2000-01-23T04:56:07.000+00:00",
    "to_user" : "",
    "code" : "aeiou",
    "type" : {
      "tags" : [ "aeiou" ],
      "claim_limit" : 123,
      "to_role" : "aeiou",
      "cancelled" : "2000-01-23T04:56:07.000+00:00",
      "fences" : {
        "type" : "aeiou",
        "coordinates" : [ [ [ 1.3579000000000001069366817318950779736042022705078125 ] ] ]
      },
      "applicability" : "aeiou",
      "reciprocal_value" : 123,
      "expiry" : "2000-01-23T04:56:07.000+00:00",
      "id" : "aeiou",
      "issued_count" : 123,
      "created" : "2000-01-23T04:56:07.000+00:00",
      "description" : "aeiou",
      "name" : "aeiou",
      "value" : 123,
      "from_role" : "aeiou",
      "code_prefix" : "aeiou",
      "code_type" : "aeiou"
    }
  },
  "user" : {
    "tags" : [ "aeiou" ],
    "enabled" : true,
    "external_id" : "aeiou",
    "id" : "aeiou",
    "balance" : 123,
    "last_transaction" : "2000-01-23T04:56:07.000+00:00",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "email" : "aeiou",
    "last_claim" : "2000-01-23T04:56:07.000+00:00",
    "description" : "aeiou",
    "name" : "aeiou",
    "role" : "aeiou",
    "coupon_count" : 123
  }
}, contentType=application/json}]
     
     - parameter id: (path) Unique ID of the user requested 
     - parameter code: (path) Unique coupon code 
     - parameter body: (body) Transaction object 
     - parameter X_IDEMPOTENCY_KEY: (header) The unique value of the key identifies the request (optional)

     - returns: RequestBuilder<CouponTransactionResponse> 
     */
    open class func claimCodeForUserWithRequestBuilder(id: String, code: String, body: CouponUserClaimRequest, X_IDEMPOTENCY_KEY: String? = nil) -> RequestBuilder<CouponTransactionResponse> {
        var path = "/user/{id}/claim/{code}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{code}", with: "\(code)", options: .literal, range: nil)
        let URLString = ReffueldAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "X-IDEMPOTENCY-KEY": X_IDEMPOTENCY_KEY
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CouponTransactionResponse>.Type = ReffueldAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter body: (body) User object 
     - parameter X_IDEMPOTENCY_KEY: (header) The unique value of the key identifies the request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createUser(body: CouponUserCreateRequest, X_IDEMPOTENCY_KEY: String? = nil, completion: @escaping ((_ data: CouponUserResponse?,_ error: Error?) -> Void)) {
        createUserWithRequestBuilder(body: body, X_IDEMPOTENCY_KEY: X_IDEMPOTENCY_KEY).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter body: (body) User object 
     - parameter X_IDEMPOTENCY_KEY: (header) The unique value of the key identifies the request (optional)
     - returns: Promise<CouponUserResponse>
     */
    open class func createUser( body: CouponUserCreateRequest,  X_IDEMPOTENCY_KEY: String? = nil) -> Promise<CouponUserResponse> {
        let deferred = Promise<CouponUserResponse>.pending()
        createUser(body: body, X_IDEMPOTENCY_KEY: X_IDEMPOTENCY_KEY) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     - POST /user
     - Create a new user.
     - API Key:
       - type: apiKey X-REFFUELD-APIKEY 
       - name: apiKeySecurity
     - examples: [{example={
  "tags" : [ "aeiou" ],
  "enabled" : true,
  "external_id" : "aeiou",
  "id" : "aeiou",
  "balance" : 123,
  "last_transaction" : "2000-01-23T04:56:07.000+00:00",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "email" : "aeiou",
  "last_claim" : "2000-01-23T04:56:07.000+00:00",
  "description" : "aeiou",
  "name" : "aeiou",
  "role" : "aeiou",
  "coupon_count" : 123
}, contentType=application/json}]
     
     - parameter body: (body) User object 
     - parameter X_IDEMPOTENCY_KEY: (header) The unique value of the key identifies the request (optional)

     - returns: RequestBuilder<CouponUserResponse> 
     */
    open class func createUserWithRequestBuilder(body: CouponUserCreateRequest, X_IDEMPOTENCY_KEY: String? = nil) -> RequestBuilder<CouponUserResponse> {
        let path = "/user"
        let URLString = ReffueldAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "X-IDEMPOTENCY-KEY": X_IDEMPOTENCY_KEY
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CouponUserResponse>.Type = ReffueldAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**
     * enum for parameter transactionType
     */
    public enum TransactionType_createUserTransaction: String { 
        case charge = "charge"
        case refund = "refund"
        case increase = "increase"
        case decrease = "decrease"
        case expire = "expire"
    }

    /**

     - parameter id: (path) Unique ID of the user requested 
     - parameter transactionType: (path) Type of transaction to perform 
     - parameter body: (body) Transaction object 
     - parameter X_IDEMPOTENCY_KEY: (header) The unique value of the key identifies the request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createUserTransaction(id: String, transactionType: TransactionType_createUserTransaction, body: CouponUserTransactionRequest, X_IDEMPOTENCY_KEY: String? = nil, completion: @escaping ((_ data: CouponTransactionResponse?,_ error: Error?) -> Void)) {
        createUserTransactionWithRequestBuilder(id: id, transactionType: transactionType, body: body, X_IDEMPOTENCY_KEY: X_IDEMPOTENCY_KEY).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter id: (path) Unique ID of the user requested 
     - parameter transactionType: (path) Type of transaction to perform 
     - parameter body: (body) Transaction object 
     - parameter X_IDEMPOTENCY_KEY: (header) The unique value of the key identifies the request (optional)
     - returns: Promise<CouponTransactionResponse>
     */
    open class func createUserTransaction( id: String,  transactionType: TransactionType_createUserTransaction,  body: CouponUserTransactionRequest,  X_IDEMPOTENCY_KEY: String? = nil) -> Promise<CouponTransactionResponse> {
        let deferred = Promise<CouponTransactionResponse>.pending()
        createUserTransaction(id: id, transactionType: transactionType, body: body, X_IDEMPOTENCY_KEY: X_IDEMPOTENCY_KEY) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     - POST /user/{id}/{transactionType}
     - A variety of balance transactions are supported, each altering the user's balance in different ways.
     - API Key:
       - type: apiKey X-REFFUELD-APIKEY 
       - name: apiKeySecurity
     - examples: [{example={
  "amount" : 123,
  "id" : "aeiou",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "description" : "aeiou",
  "type" : "aeiou",
  "coupon" : {
    "id" : "aeiou",
    "claimed_count" : 123,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "description" : "aeiou",
    "from_user" : "",
    "value" : 123,
    "cancelled" : "2000-01-23T04:56:07.000+00:00",
    "to_user" : "",
    "code" : "aeiou",
    "type" : {
      "tags" : [ "aeiou" ],
      "claim_limit" : 123,
      "to_role" : "aeiou",
      "cancelled" : "2000-01-23T04:56:07.000+00:00",
      "fences" : {
        "type" : "aeiou",
        "coordinates" : [ [ [ 1.3579000000000001069366817318950779736042022705078125 ] ] ]
      },
      "applicability" : "aeiou",
      "reciprocal_value" : 123,
      "expiry" : "2000-01-23T04:56:07.000+00:00",
      "id" : "aeiou",
      "issued_count" : 123,
      "created" : "2000-01-23T04:56:07.000+00:00",
      "description" : "aeiou",
      "name" : "aeiou",
      "value" : 123,
      "from_role" : "aeiou",
      "code_prefix" : "aeiou",
      "code_type" : "aeiou"
    }
  },
  "user" : {
    "tags" : [ "aeiou" ],
    "enabled" : true,
    "external_id" : "aeiou",
    "id" : "aeiou",
    "balance" : 123,
    "last_transaction" : "2000-01-23T04:56:07.000+00:00",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "email" : "aeiou",
    "last_claim" : "2000-01-23T04:56:07.000+00:00",
    "description" : "aeiou",
    "name" : "aeiou",
    "role" : "aeiou",
    "coupon_count" : 123
  }
}, contentType=application/json}]
     
     - parameter id: (path) Unique ID of the user requested 
     - parameter transactionType: (path) Type of transaction to perform 
     - parameter body: (body) Transaction object 
     - parameter X_IDEMPOTENCY_KEY: (header) The unique value of the key identifies the request (optional)

     - returns: RequestBuilder<CouponTransactionResponse> 
     */
    open class func createUserTransactionWithRequestBuilder(id: String, transactionType: TransactionType_createUserTransaction, body: CouponUserTransactionRequest, X_IDEMPOTENCY_KEY: String? = nil) -> RequestBuilder<CouponTransactionResponse> {
        var path = "/user/{id}/{transactionType}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        path = path.replacingOccurrences(of: "{transactionType}", with: "\(transactionType.rawValue)", options: .literal, range: nil)
        let URLString = ReffueldAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            "X-IDEMPOTENCY-KEY": X_IDEMPOTENCY_KEY
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CouponTransactionResponse>.Type = ReffueldAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters)
    }

    /**

     - parameter id: (path) Unique ID of the user requested 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUserById(id: String, completion: @escaping ((_ data: CouponUserResponse?,_ error: Error?) -> Void)) {
        getUserByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter id: (path) Unique ID of the user requested 
     - returns: Promise<CouponUserResponse>
     */
    open class func getUserById( id: String) -> Promise<CouponUserResponse> {
        let deferred = Promise<CouponUserResponse>.pending()
        getUserById(id: id) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     - GET /user/{id}
     - Retrieve the entire user object by its ID.
     - API Key:
       - type: apiKey X-REFFUELD-APIKEY 
       - name: apiKeySecurity
     - examples: [{example={
  "tags" : [ "aeiou" ],
  "enabled" : true,
  "external_id" : "aeiou",
  "id" : "aeiou",
  "balance" : 123,
  "last_transaction" : "2000-01-23T04:56:07.000+00:00",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "email" : "aeiou",
  "last_claim" : "2000-01-23T04:56:07.000+00:00",
  "description" : "aeiou",
  "name" : "aeiou",
  "role" : "aeiou",
  "coupon_count" : 123
}, contentType=application/json}]
     
     - parameter id: (path) Unique ID of the user requested 

     - returns: RequestBuilder<CouponUserResponse> 
     */
    open class func getUserByIdWithRequestBuilder(id: String) -> RequestBuilder<CouponUserResponse> {
        var path = "/user/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = ReffueldAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CouponUserResponse>.Type = ReffueldAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter enabled: (query)  (optional)
     - parameter role: (query)  (optional)
     - parameter tag: (query)  (optional)
     - parameter createdBefore: (query)  (optional)
     - parameter createdAfter: (query)  (optional)
     - parameter balanceLt: (query)  (optional)
     - parameter balanceGt: (query)  (optional)
     - parameter lastTransactionBefore: (query)  (optional)
     - parameter lastTransactionAfter: (query)  (optional)
     - parameter lastClaimBefore: (query)  (optional)
     - parameter lastClaimAfter: (query)  (optional)
     - parameter limit: (query) Number of items returned in the list (optional, default to 10)
     - parameter offset: (query) Points to the n-th object in the database to start the returned list with (optional)
     - parameter cursor: (query) A pointer to the first item on the list, returned by the previous query (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getUsers(enabled: Bool? = nil, role: String? = nil, tag: String? = nil, createdBefore: Date? = nil, createdAfter: Date? = nil, balanceLt: Int32? = nil, balanceGt: Int32? = nil, lastTransactionBefore: Date? = nil, lastTransactionAfter: Date? = nil, lastClaimBefore: Date? = nil, lastClaimAfter: Date? = nil, limit: Int32? = nil, offset: Int32? = nil, cursor: String? = nil, completion: @escaping ((_ data: CouponUserListResponse?,_ error: Error?) -> Void)) {
        getUsersWithRequestBuilder(enabled: enabled, role: role, tag: tag, createdBefore: createdBefore, createdAfter: createdAfter, balanceLt: balanceLt, balanceGt: balanceGt, lastTransactionBefore: lastTransactionBefore, lastTransactionAfter: lastTransactionAfter, lastClaimBefore: lastClaimBefore, lastClaimAfter: lastClaimAfter, limit: limit, offset: offset, cursor: cursor).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter enabled: (query)  (optional)
     - parameter role: (query)  (optional)
     - parameter tag: (query)  (optional)
     - parameter createdBefore: (query)  (optional)
     - parameter createdAfter: (query)  (optional)
     - parameter balanceLt: (query)  (optional)
     - parameter balanceGt: (query)  (optional)
     - parameter lastTransactionBefore: (query)  (optional)
     - parameter lastTransactionAfter: (query)  (optional)
     - parameter lastClaimBefore: (query)  (optional)
     - parameter lastClaimAfter: (query)  (optional)
     - parameter limit: (query) Number of items returned in the list (optional, default to 10)
     - parameter offset: (query) Points to the n-th object in the database to start the returned list with (optional)
     - parameter cursor: (query) A pointer to the first item on the list, returned by the previous query (optional)
     - returns: Promise<CouponUserListResponse>
     */
    open class func getUsers( enabled: Bool? = nil,  role: String? = nil,  tag: String? = nil,  createdBefore: Date? = nil,  createdAfter: Date? = nil,  balanceLt: Int32? = nil,  balanceGt: Int32? = nil,  lastTransactionBefore: Date? = nil,  lastTransactionAfter: Date? = nil,  lastClaimBefore: Date? = nil,  lastClaimAfter: Date? = nil,  limit: Int32? = nil,  offset: Int32? = nil,  cursor: String? = nil) -> Promise<CouponUserListResponse> {
        let deferred = Promise<CouponUserListResponse>.pending()
        getUsers(enabled: enabled, role: role, tag: tag, createdBefore: createdBefore, createdAfter: createdAfter, balanceLt: balanceLt, balanceGt: balanceGt, lastTransactionBefore: lastTransactionBefore, lastTransactionAfter: lastTransactionAfter, lastClaimBefore: lastClaimBefore, lastClaimAfter: lastClaimAfter, limit: limit, offset: offset, cursor: cursor) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     - GET /user
     - Retrieve a list of users with all their details.
     - API Key:
       - type: apiKey X-REFFUELD-APIKEY 
       - name: apiKeySecurity
     - examples: [{example={
  "data" : [ {
    "tags" : [ "aeiou" ],
    "enabled" : true,
    "external_id" : "aeiou",
    "id" : "aeiou",
    "balance" : 123,
    "last_transaction" : "2000-01-23T04:56:07.000+00:00",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "email" : "aeiou",
    "last_claim" : "2000-01-23T04:56:07.000+00:00",
    "description" : "aeiou",
    "name" : "aeiou",
    "role" : "aeiou",
    "coupon_count" : 123
  } ],
  "_meta" : {
    "count" : 123,
    "has_more" : true,
    "object" : "aeiou",
    "total_count" : 123
  }
}, contentType=application/json}]
     
     - parameter enabled: (query)  (optional)
     - parameter role: (query)  (optional)
     - parameter tag: (query)  (optional)
     - parameter createdBefore: (query)  (optional)
     - parameter createdAfter: (query)  (optional)
     - parameter balanceLt: (query)  (optional)
     - parameter balanceGt: (query)  (optional)
     - parameter lastTransactionBefore: (query)  (optional)
     - parameter lastTransactionAfter: (query)  (optional)
     - parameter lastClaimBefore: (query)  (optional)
     - parameter lastClaimAfter: (query)  (optional)
     - parameter limit: (query) Number of items returned in the list (optional, default to 10)
     - parameter offset: (query) Points to the n-th object in the database to start the returned list with (optional)
     - parameter cursor: (query) A pointer to the first item on the list, returned by the previous query (optional)

     - returns: RequestBuilder<CouponUserListResponse> 
     */
    open class func getUsersWithRequestBuilder(enabled: Bool? = nil, role: String? = nil, tag: String? = nil, createdBefore: Date? = nil, createdAfter: Date? = nil, balanceLt: Int32? = nil, balanceGt: Int32? = nil, lastTransactionBefore: Date? = nil, lastTransactionAfter: Date? = nil, lastClaimBefore: Date? = nil, lastClaimAfter: Date? = nil, limit: Int32? = nil, offset: Int32? = nil, cursor: String? = nil) -> RequestBuilder<CouponUserListResponse> {
        let path = "/user"
        let URLString = ReffueldAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "enabled": enabled, 
            "role": role, 
            "tag": tag, 
            "created_before": createdBefore?.encodeToJSON(), 
            "created_after": createdAfter?.encodeToJSON(), 
            "balance_lt": balanceLt?.encodeToJSON(), 
            "balance_gt": balanceGt?.encodeToJSON(), 
            "last_transaction_before": lastTransactionBefore?.encodeToJSON(), 
            "last_transaction_after": lastTransactionAfter?.encodeToJSON(), 
            "last_claim_before": lastClaimBefore?.encodeToJSON(), 
            "last_claim_after": lastClaimAfter?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "offset": offset?.encodeToJSON(), 
            "cursor": cursor
        ])
        

        let requestBuilder: RequestBuilder<CouponUserListResponse>.Type = ReffueldAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path) Unique ID of the user requested 
     - parameter body: (body) Transaction object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func reciprocateUserTransaction(id: String, body: CouponUserReciprocateRequest, completion: @escaping ((_ data: CouponTransactionResponse?,_ error: Error?) -> Void)) {
        reciprocateUserTransactionWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter id: (path) Unique ID of the user requested 
     - parameter body: (body) Transaction object 
     - returns: Promise<CouponTransactionResponse>
     */
    open class func reciprocateUserTransaction( id: String,  body: CouponUserReciprocateRequest) -> Promise<CouponTransactionResponse> {
        let deferred = Promise<CouponTransactionResponse>.pending()
        reciprocateUserTransaction(id: id, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     - POST /user/{id}/reciprocate
     - Claim a single code for a specific user, resulting in a CLAIM type transaction.
     - API Key:
       - type: apiKey X-REFFUELD-APIKEY 
       - name: apiKeySecurity
     - examples: [{example={
  "amount" : 123,
  "id" : "aeiou",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "description" : "aeiou",
  "type" : "aeiou",
  "coupon" : {
    "id" : "aeiou",
    "claimed_count" : 123,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "description" : "aeiou",
    "from_user" : "",
    "value" : 123,
    "cancelled" : "2000-01-23T04:56:07.000+00:00",
    "to_user" : "",
    "code" : "aeiou",
    "type" : {
      "tags" : [ "aeiou" ],
      "claim_limit" : 123,
      "to_role" : "aeiou",
      "cancelled" : "2000-01-23T04:56:07.000+00:00",
      "fences" : {
        "type" : "aeiou",
        "coordinates" : [ [ [ 1.3579000000000001069366817318950779736042022705078125 ] ] ]
      },
      "applicability" : "aeiou",
      "reciprocal_value" : 123,
      "expiry" : "2000-01-23T04:56:07.000+00:00",
      "id" : "aeiou",
      "issued_count" : 123,
      "created" : "2000-01-23T04:56:07.000+00:00",
      "description" : "aeiou",
      "name" : "aeiou",
      "value" : 123,
      "from_role" : "aeiou",
      "code_prefix" : "aeiou",
      "code_type" : "aeiou"
    }
  },
  "user" : {
    "tags" : [ "aeiou" ],
    "enabled" : true,
    "external_id" : "aeiou",
    "id" : "aeiou",
    "balance" : 123,
    "last_transaction" : "2000-01-23T04:56:07.000+00:00",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "email" : "aeiou",
    "last_claim" : "2000-01-23T04:56:07.000+00:00",
    "description" : "aeiou",
    "name" : "aeiou",
    "role" : "aeiou",
    "coupon_count" : 123
  }
}, contentType=application/json}]
     
     - parameter id: (path) Unique ID of the user requested 
     - parameter body: (body) Transaction object 

     - returns: RequestBuilder<CouponTransactionResponse> 
     */
    open class func reciprocateUserTransactionWithRequestBuilder(id: String, body: CouponUserReciprocateRequest) -> RequestBuilder<CouponTransactionResponse> {
        var path = "/user/{id}/reciprocate"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = ReffueldAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CouponTransactionResponse>.Type = ReffueldAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter id: (path) Unique ID of the user requested 
     - parameter body: (body) User object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateUser(id: String, body: CouponUserUpdateRequest, completion: @escaping ((_ data: CouponUserResponse?,_ error: Error?) -> Void)) {
        updateUserWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter id: (path) Unique ID of the user requested 
     - parameter body: (body) User object 
     - returns: Promise<CouponUserResponse>
     */
    open class func updateUser( id: String,  body: CouponUserUpdateRequest) -> Promise<CouponUserResponse> {
        let deferred = Promise<CouponUserResponse>.pending()
        updateUser(id: id, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /user/{id}
     - Update user details for a single user.
     - API Key:
       - type: apiKey X-REFFUELD-APIKEY 
       - name: apiKeySecurity
     - examples: [{example={
  "tags" : [ "aeiou" ],
  "enabled" : true,
  "external_id" : "aeiou",
  "id" : "aeiou",
  "balance" : 123,
  "last_transaction" : "2000-01-23T04:56:07.000+00:00",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "email" : "aeiou",
  "last_claim" : "2000-01-23T04:56:07.000+00:00",
  "description" : "aeiou",
  "name" : "aeiou",
  "role" : "aeiou",
  "coupon_count" : 123
}, contentType=application/json}]
     
     - parameter id: (path) Unique ID of the user requested 
     - parameter body: (body) User object 

     - returns: RequestBuilder<CouponUserResponse> 
     */
    open class func updateUserWithRequestBuilder(id: String, body: CouponUserUpdateRequest) -> RequestBuilder<CouponUserResponse> {
        var path = "/user/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = ReffueldAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CouponUserResponse>.Type = ReffueldAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
