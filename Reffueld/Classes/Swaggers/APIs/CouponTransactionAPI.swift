//
// CouponTransactionAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit



open class CouponTransactionAPI: APIBase {
    /**

     - parameter id: (path) Unique ID of the user requested 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCouponTransactionById(id: String, completion: @escaping ((_ data: CouponTransactionResponse?,_ error: Error?) -> Void)) {
        getCouponTransactionByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter id: (path) Unique ID of the user requested 
     - returns: Promise<CouponTransactionResponse>
     */
    open class func getCouponTransactionById( id: String) -> Promise<CouponTransactionResponse> {
        let deferred = Promise<CouponTransactionResponse>.pending()
        getCouponTransactionById(id: id) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     - GET /transaction/{id}
     - coupon transaction
     - API Key:
       - type: apiKey X-REFFUELD-APIKEY 
       - name: apiKeySecurity
     - examples: [{example={
  "amount" : 123,
  "id" : "aeiou",
  "created" : "2000-01-23T04:56:07.000+00:00",
  "description" : "aeiou",
  "type" : "aeiou",
  "coupon" : {
    "id" : "aeiou",
    "claimed_count" : 123,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "description" : "aeiou",
    "from_user" : "",
    "value" : 123,
    "cancelled" : "2000-01-23T04:56:07.000+00:00",
    "to_user" : "",
    "code" : "aeiou",
    "type" : {
      "tags" : [ "aeiou" ],
      "claim_limit" : 123,
      "to_role" : "aeiou",
      "cancelled" : "2000-01-23T04:56:07.000+00:00",
      "fences" : {
        "type" : "aeiou",
        "coordinates" : [ [ [ 1.3579000000000001069366817318950779736042022705078125 ] ] ]
      },
      "applicability" : "aeiou",
      "reciprocal_value" : 123,
      "expiry" : "2000-01-23T04:56:07.000+00:00",
      "id" : "aeiou",
      "issued_count" : 123,
      "created" : "2000-01-23T04:56:07.000+00:00",
      "description" : "aeiou",
      "name" : "aeiou",
      "value" : 123,
      "from_role" : "aeiou",
      "code_prefix" : "aeiou",
      "code_type" : "aeiou"
    }
  },
  "user" : {
    "tags" : [ "aeiou" ],
    "enabled" : true,
    "external_id" : "aeiou",
    "id" : "aeiou",
    "balance" : 123,
    "last_transaction" : "2000-01-23T04:56:07.000+00:00",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "email" : "aeiou",
    "last_claim" : "2000-01-23T04:56:07.000+00:00",
    "description" : "aeiou",
    "name" : "aeiou",
    "role" : "aeiou",
    "coupon_count" : 123
  }
}, contentType=application/json}]
     
     - parameter id: (path) Unique ID of the user requested 

     - returns: RequestBuilder<CouponTransactionResponse> 
     */
    open class func getCouponTransactionByIdWithRequestBuilder(id: String) -> RequestBuilder<CouponTransactionResponse> {
        var path = "/transaction/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = ReffueldAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CouponTransactionResponse>.Type = ReffueldAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter createdBefore: (query)  (optional)
     - parameter createdAfter: (query)  (optional)
     - parameter txType: (query)  (optional)
     - parameter couponCode: (query)  (optional)
     - parameter userId: (query)  (optional)
     - parameter amountLt: (query)  (optional)
     - parameter amountGt: (query)  (optional)
     - parameter limit: (query) Number of items returned in the list (optional, default to 10)
     - parameter offset: (query) Points to the n-th object in the database to start the returned list with (optional)
     - parameter cursor: (query) A pointer to the first item on the list, returned by the previous query (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCouponTransactions(createdBefore: Date? = nil, createdAfter: Date? = nil, txType: String? = nil, couponCode: String? = nil, userId: String? = nil, amountLt: Int32? = nil, amountGt: Int32? = nil, limit: Int32? = nil, offset: Int32? = nil, cursor: String? = nil, completion: @escaping ((_ data: CouponTransactionListResponse?,_ error: Error?) -> Void)) {
        getCouponTransactionsWithRequestBuilder(createdBefore: createdBefore, createdAfter: createdAfter, txType: txType, couponCode: couponCode, userId: userId, amountLt: amountLt, amountGt: amountGt, limit: limit, offset: offset, cursor: cursor).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter createdBefore: (query)  (optional)
     - parameter createdAfter: (query)  (optional)
     - parameter txType: (query)  (optional)
     - parameter couponCode: (query)  (optional)
     - parameter userId: (query)  (optional)
     - parameter amountLt: (query)  (optional)
     - parameter amountGt: (query)  (optional)
     - parameter limit: (query) Number of items returned in the list (optional, default to 10)
     - parameter offset: (query) Points to the n-th object in the database to start the returned list with (optional)
     - parameter cursor: (query) A pointer to the first item on the list, returned by the previous query (optional)
     - returns: Promise<CouponTransactionListResponse>
     */
    open class func getCouponTransactions( createdBefore: Date? = nil,  createdAfter: Date? = nil,  txType: String? = nil,  couponCode: String? = nil,  userId: String? = nil,  amountLt: Int32? = nil,  amountGt: Int32? = nil,  limit: Int32? = nil,  offset: Int32? = nil,  cursor: String? = nil) -> Promise<CouponTransactionListResponse> {
        let deferred = Promise<CouponTransactionListResponse>.pending()
        getCouponTransactions(createdBefore: createdBefore, createdAfter: createdAfter, txType: txType, couponCode: couponCode, userId: userId, amountLt: amountLt, amountGt: amountGt, limit: limit, offset: offset, cursor: cursor) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     - GET /transaction
     - coupon transaction
     - API Key:
       - type: apiKey X-REFFUELD-APIKEY 
       - name: apiKeySecurity
     - examples: [{example={
  "data" : [ {
    "amount" : 123,
    "id" : "aeiou",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "description" : "aeiou",
    "type" : "aeiou",
    "coupon" : {
      "id" : "aeiou",
      "claimed_count" : 123,
      "created" : "2000-01-23T04:56:07.000+00:00",
      "description" : "aeiou",
      "from_user" : "",
      "value" : 123,
      "cancelled" : "2000-01-23T04:56:07.000+00:00",
      "to_user" : "",
      "code" : "aeiou",
      "type" : {
        "tags" : [ "aeiou" ],
        "claim_limit" : 123,
        "to_role" : "aeiou",
        "cancelled" : "2000-01-23T04:56:07.000+00:00",
        "fences" : {
          "type" : "aeiou",
          "coordinates" : [ [ [ 1.3579000000000001069366817318950779736042022705078125 ] ] ]
        },
        "applicability" : "aeiou",
        "reciprocal_value" : 123,
        "expiry" : "2000-01-23T04:56:07.000+00:00",
        "id" : "aeiou",
        "issued_count" : 123,
        "created" : "2000-01-23T04:56:07.000+00:00",
        "description" : "aeiou",
        "name" : "aeiou",
        "value" : 123,
        "from_role" : "aeiou",
        "code_prefix" : "aeiou",
        "code_type" : "aeiou"
      }
    },
    "user" : {
      "tags" : [ "aeiou" ],
      "enabled" : true,
      "external_id" : "aeiou",
      "id" : "aeiou",
      "balance" : 123,
      "last_transaction" : "2000-01-23T04:56:07.000+00:00",
      "created" : "2000-01-23T04:56:07.000+00:00",
      "email" : "aeiou",
      "last_claim" : "2000-01-23T04:56:07.000+00:00",
      "description" : "aeiou",
      "name" : "aeiou",
      "role" : "aeiou",
      "coupon_count" : 123
    }
  } ],
  "_meta" : {
    "count" : 123,
    "has_more" : true,
    "object" : "aeiou",
    "total_count" : 123
  }
}, contentType=application/json}]
     
     - parameter createdBefore: (query)  (optional)
     - parameter createdAfter: (query)  (optional)
     - parameter txType: (query)  (optional)
     - parameter couponCode: (query)  (optional)
     - parameter userId: (query)  (optional)
     - parameter amountLt: (query)  (optional)
     - parameter amountGt: (query)  (optional)
     - parameter limit: (query) Number of items returned in the list (optional, default to 10)
     - parameter offset: (query) Points to the n-th object in the database to start the returned list with (optional)
     - parameter cursor: (query) A pointer to the first item on the list, returned by the previous query (optional)

     - returns: RequestBuilder<CouponTransactionListResponse> 
     */
    open class func getCouponTransactionsWithRequestBuilder(createdBefore: Date? = nil, createdAfter: Date? = nil, txType: String? = nil, couponCode: String? = nil, userId: String? = nil, amountLt: Int32? = nil, amountGt: Int32? = nil, limit: Int32? = nil, offset: Int32? = nil, cursor: String? = nil) -> RequestBuilder<CouponTransactionListResponse> {
        let path = "/transaction"
        let URLString = ReffueldAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "created_before": createdBefore?.encodeToJSON(), 
            "created_after": createdAfter?.encodeToJSON(), 
            "tx_type": txType, 
            "coupon_code": couponCode, 
            "user_id": userId, 
            "amount_lt": amountLt?.encodeToJSON(), 
            "amount_gt": amountGt?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "offset": offset?.encodeToJSON(), 
            "cursor": cursor
        ])
        

        let requestBuilder: RequestBuilder<CouponTransactionListResponse>.Type = ReffueldAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
