//
// CouponTypeAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit



open class CouponTypeAPI: APIBase {
    /**

     - parameter id: (path) Unique ID of the user requested 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelCouponType(id: String, completion: @escaping ((_ data: CouponTypeResponse?,_ error: Error?) -> Void)) {
        cancelCouponTypeWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter id: (path) Unique ID of the user requested 
     - returns: Promise<CouponTypeResponse>
     */
    open class func cancelCouponType( id: String) -> Promise<CouponTypeResponse> {
        let deferred = Promise<CouponTypeResponse>.pending()
        cancelCouponType(id: id) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /coupontype/{id}
     - coupontype
     - API Key:
       - type: apiKey X-REFFUELD-APIKEY 
       - name: apiKeySecurity
     - examples: [{example={
  "tags" : [ "aeiou" ],
  "claim_limit" : 123,
  "to_role" : "aeiou",
  "cancelled" : "2000-01-23T04:56:07.000+00:00",
  "fences" : {
    "type" : "aeiou",
    "coordinates" : [ [ [ 1.3579000000000001069366817318950779736042022705078125 ] ] ]
  },
  "applicability" : "aeiou",
  "reciprocal_value" : 123,
  "expiry" : "2000-01-23T04:56:07.000+00:00",
  "id" : "aeiou",
  "issued_count" : 123,
  "created" : "2000-01-23T04:56:07.000+00:00",
  "description" : "aeiou",
  "name" : "aeiou",
  "value" : 123,
  "from_role" : "aeiou",
  "code_prefix" : "aeiou",
  "code_type" : "aeiou"
}, contentType=application/json}]
     
     - parameter id: (path) Unique ID of the user requested 

     - returns: RequestBuilder<CouponTypeResponse> 
     */
    open class func cancelCouponTypeWithRequestBuilder(id: String) -> RequestBuilder<CouponTypeResponse> {
        var path = "/coupontype/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = ReffueldAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CouponTypeResponse>.Type = ReffueldAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter body: (body) CouponType object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func createCouponType(body: CoupontTypeCreateRequest, completion: @escaping ((_ data: CouponTypeResponse?,_ error: Error?) -> Void)) {
        createCouponTypeWithRequestBuilder(body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter body: (body) CouponType object 
     - returns: Promise<CouponTypeResponse>
     */
    open class func createCouponType( body: CoupontTypeCreateRequest) -> Promise<CouponTypeResponse> {
        let deferred = Promise<CouponTypeResponse>.pending()
        createCouponType(body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     - POST /coupontype
     - coupontype
     - API Key:
       - type: apiKey X-REFFUELD-APIKEY 
       - name: apiKeySecurity
     - examples: [{example={
  "tags" : [ "aeiou" ],
  "claim_limit" : 123,
  "to_role" : "aeiou",
  "cancelled" : "2000-01-23T04:56:07.000+00:00",
  "fences" : {
    "type" : "aeiou",
    "coordinates" : [ [ [ 1.3579000000000001069366817318950779736042022705078125 ] ] ]
  },
  "applicability" : "aeiou",
  "reciprocal_value" : 123,
  "expiry" : "2000-01-23T04:56:07.000+00:00",
  "id" : "aeiou",
  "issued_count" : 123,
  "created" : "2000-01-23T04:56:07.000+00:00",
  "description" : "aeiou",
  "name" : "aeiou",
  "value" : 123,
  "from_role" : "aeiou",
  "code_prefix" : "aeiou",
  "code_type" : "aeiou"
}, contentType=application/json}]
     
     - parameter body: (body) CouponType object 

     - returns: RequestBuilder<CouponTypeResponse> 
     */
    open class func createCouponTypeWithRequestBuilder(body: CoupontTypeCreateRequest) -> RequestBuilder<CouponTypeResponse> {
        let path = "/coupontype"
        let URLString = ReffueldAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CouponTypeResponse>.Type = ReffueldAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter id: (path) Unique ID of the user requested 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCouponTypeById(id: String, completion: @escaping ((_ data: CouponTypeResponse?,_ error: Error?) -> Void)) {
        getCouponTypeByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter id: (path) Unique ID of the user requested 
     - returns: Promise<CouponTypeResponse>
     */
    open class func getCouponTypeById( id: String) -> Promise<CouponTypeResponse> {
        let deferred = Promise<CouponTypeResponse>.pending()
        getCouponTypeById(id: id) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     - GET /coupontype/{id}
     - coupontype
     - API Key:
       - type: apiKey X-REFFUELD-APIKEY 
       - name: apiKeySecurity
     - examples: [{example={
  "tags" : [ "aeiou" ],
  "claim_limit" : 123,
  "to_role" : "aeiou",
  "cancelled" : "2000-01-23T04:56:07.000+00:00",
  "fences" : {
    "type" : "aeiou",
    "coordinates" : [ [ [ 1.3579000000000001069366817318950779736042022705078125 ] ] ]
  },
  "applicability" : "aeiou",
  "reciprocal_value" : 123,
  "expiry" : "2000-01-23T04:56:07.000+00:00",
  "id" : "aeiou",
  "issued_count" : 123,
  "created" : "2000-01-23T04:56:07.000+00:00",
  "description" : "aeiou",
  "name" : "aeiou",
  "value" : 123,
  "from_role" : "aeiou",
  "code_prefix" : "aeiou",
  "code_type" : "aeiou"
}, contentType=application/json}]
     
     - parameter id: (path) Unique ID of the user requested 

     - returns: RequestBuilder<CouponTypeResponse> 
     */
    open class func getCouponTypeByIdWithRequestBuilder(id: String) -> RequestBuilder<CouponTypeResponse> {
        var path = "/coupontype/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = ReffueldAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CouponTypeResponse>.Type = ReffueldAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter tag: (query)  (optional)
     - parameter createdBefore: (query)  (optional)
     - parameter createdAfter: (query)  (optional)
     - parameter expiryBefore: (query)  (optional)
     - parameter expiryAfter: (query)  (optional)
     - parameter fromRole: (query)  (optional)
     - parameter toRole: (query)  (optional)
     - parameter issuedCountLt: (query)  (optional)
     - parameter issuedCountGt: (query)  (optional)
     - parameter limit: (query) Number of items returned in the list (optional, default to 10)
     - parameter offset: (query) Points to the n-th object in the database to start the returned list with (optional)
     - parameter cursor: (query) A pointer to the first item on the list, returned by the previous query (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCouponTypes(tag: String? = nil, createdBefore: Date? = nil, createdAfter: Date? = nil, expiryBefore: Date? = nil, expiryAfter: Date? = nil, fromRole: String? = nil, toRole: String? = nil, issuedCountLt: Int32? = nil, issuedCountGt: Int32? = nil, limit: Int32? = nil, offset: Int32? = nil, cursor: String? = nil, completion: @escaping ((_ data: CouponTypeListResponse?,_ error: Error?) -> Void)) {
        getCouponTypesWithRequestBuilder(tag: tag, createdBefore: createdBefore, createdAfter: createdAfter, expiryBefore: expiryBefore, expiryAfter: expiryAfter, fromRole: fromRole, toRole: toRole, issuedCountLt: issuedCountLt, issuedCountGt: issuedCountGt, limit: limit, offset: offset, cursor: cursor).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter tag: (query)  (optional)
     - parameter createdBefore: (query)  (optional)
     - parameter createdAfter: (query)  (optional)
     - parameter expiryBefore: (query)  (optional)
     - parameter expiryAfter: (query)  (optional)
     - parameter fromRole: (query)  (optional)
     - parameter toRole: (query)  (optional)
     - parameter issuedCountLt: (query)  (optional)
     - parameter issuedCountGt: (query)  (optional)
     - parameter limit: (query) Number of items returned in the list (optional, default to 10)
     - parameter offset: (query) Points to the n-th object in the database to start the returned list with (optional)
     - parameter cursor: (query) A pointer to the first item on the list, returned by the previous query (optional)
     - returns: Promise<CouponTypeListResponse>
     */
    open class func getCouponTypes( tag: String? = nil,  createdBefore: Date? = nil,  createdAfter: Date? = nil,  expiryBefore: Date? = nil,  expiryAfter: Date? = nil,  fromRole: String? = nil,  toRole: String? = nil,  issuedCountLt: Int32? = nil,  issuedCountGt: Int32? = nil,  limit: Int32? = nil,  offset: Int32? = nil,  cursor: String? = nil) -> Promise<CouponTypeListResponse> {
        let deferred = Promise<CouponTypeListResponse>.pending()
        getCouponTypes(tag: tag, createdBefore: createdBefore, createdAfter: createdAfter, expiryBefore: expiryBefore, expiryAfter: expiryAfter, fromRole: fromRole, toRole: toRole, issuedCountLt: issuedCountLt, issuedCountGt: issuedCountGt, limit: limit, offset: offset, cursor: cursor) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     - GET /coupontype
     - coupontype
     - API Key:
       - type: apiKey X-REFFUELD-APIKEY 
       - name: apiKeySecurity
     - examples: [{example={
  "data" : [ {
    "tags" : [ "aeiou" ],
    "claim_limit" : 123,
    "to_role" : "aeiou",
    "cancelled" : "2000-01-23T04:56:07.000+00:00",
    "fences" : {
      "type" : "aeiou",
      "coordinates" : [ [ [ 1.3579000000000001069366817318950779736042022705078125 ] ] ]
    },
    "applicability" : "aeiou",
    "reciprocal_value" : 123,
    "expiry" : "2000-01-23T04:56:07.000+00:00",
    "id" : "aeiou",
    "issued_count" : 123,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "description" : "aeiou",
    "name" : "aeiou",
    "value" : 123,
    "from_role" : "aeiou",
    "code_prefix" : "aeiou",
    "code_type" : "aeiou"
  } ],
  "_meta" : {
    "count" : 123,
    "has_more" : true,
    "object" : "aeiou",
    "total_count" : 123
  }
}, contentType=application/json}]
     
     - parameter tag: (query)  (optional)
     - parameter createdBefore: (query)  (optional)
     - parameter createdAfter: (query)  (optional)
     - parameter expiryBefore: (query)  (optional)
     - parameter expiryAfter: (query)  (optional)
     - parameter fromRole: (query)  (optional)
     - parameter toRole: (query)  (optional)
     - parameter issuedCountLt: (query)  (optional)
     - parameter issuedCountGt: (query)  (optional)
     - parameter limit: (query) Number of items returned in the list (optional, default to 10)
     - parameter offset: (query) Points to the n-th object in the database to start the returned list with (optional)
     - parameter cursor: (query) A pointer to the first item on the list, returned by the previous query (optional)

     - returns: RequestBuilder<CouponTypeListResponse> 
     */
    open class func getCouponTypesWithRequestBuilder(tag: String? = nil, createdBefore: Date? = nil, createdAfter: Date? = nil, expiryBefore: Date? = nil, expiryAfter: Date? = nil, fromRole: String? = nil, toRole: String? = nil, issuedCountLt: Int32? = nil, issuedCountGt: Int32? = nil, limit: Int32? = nil, offset: Int32? = nil, cursor: String? = nil) -> RequestBuilder<CouponTypeListResponse> {
        let path = "/coupontype"
        let URLString = ReffueldAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "tag": tag, 
            "created_before": createdBefore?.encodeToJSON(), 
            "created_after": createdAfter?.encodeToJSON(), 
            "expiry_before": expiryBefore?.encodeToJSON(), 
            "expiry_after": expiryAfter?.encodeToJSON(), 
            "from_role": fromRole, 
            "to_role": toRole, 
            "issued_count_lt": issuedCountLt?.encodeToJSON(), 
            "issued_count_gt": issuedCountGt?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "offset": offset?.encodeToJSON(), 
            "cursor": cursor
        ])
        

        let requestBuilder: RequestBuilder<CouponTypeListResponse>.Type = ReffueldAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path) Unique ID of the user requested 
     - parameter body: (body) Unique ID of the coupon type 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func issueCoupons(id: String, body: CouponTypeIssueRequest, completion: @escaping ((_ data: CodeListResponse?,_ error: Error?) -> Void)) {
        issueCouponsWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter id: (path) Unique ID of the user requested 
     - parameter body: (body) Unique ID of the coupon type 
     - returns: Promise<CodeListResponse>
     */
    open class func issueCoupons( id: String,  body: CouponTypeIssueRequest) -> Promise<CodeListResponse> {
        let deferred = Promise<CodeListResponse>.pending()
        issueCoupons(id: id, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     - POST /coupontype/{id}/issue
     - coupontype
     - API Key:
       - type: apiKey X-REFFUELD-APIKEY 
       - name: apiKeySecurity
     - examples: [{example={
  "data" : [ "aeiou" ],
  "_meta" : {
    "count" : 123,
    "has_more" : true,
    "object" : "aeiou",
    "total_count" : 123
  }
}, contentType=application/json}]
     
     - parameter id: (path) Unique ID of the user requested 
     - parameter body: (body) Unique ID of the coupon type 

     - returns: RequestBuilder<CodeListResponse> 
     */
    open class func issueCouponsWithRequestBuilder(id: String, body: CouponTypeIssueRequest) -> RequestBuilder<CodeListResponse> {
        var path = "/coupontype/{id}/issue"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = ReffueldAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CodeListResponse>.Type = ReffueldAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

    /**

     - parameter id: (path) Unique ID of the user requested 
     - parameter body: (body) CouponType object 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func updateCouponType(id: String, body: CouponTypeUpdateRequest, completion: @escaping ((_ data: CouponTypeResponse?,_ error: Error?) -> Void)) {
        updateCouponTypeWithRequestBuilder(id: id, body: body).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter id: (path) Unique ID of the user requested 
     - parameter body: (body) CouponType object 
     - returns: Promise<CouponTypeResponse>
     */
    open class func updateCouponType( id: String,  body: CouponTypeUpdateRequest) -> Promise<CouponTypeResponse> {
        let deferred = Promise<CouponTypeResponse>.pending()
        updateCouponType(id: id, body: body) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     - PUT /coupontype/{id}
     - coupontype
     - API Key:
       - type: apiKey X-REFFUELD-APIKEY 
       - name: apiKeySecurity
     - examples: [{example={
  "tags" : [ "aeiou" ],
  "claim_limit" : 123,
  "to_role" : "aeiou",
  "cancelled" : "2000-01-23T04:56:07.000+00:00",
  "fences" : {
    "type" : "aeiou",
    "coordinates" : [ [ [ 1.3579000000000001069366817318950779736042022705078125 ] ] ]
  },
  "applicability" : "aeiou",
  "reciprocal_value" : 123,
  "expiry" : "2000-01-23T04:56:07.000+00:00",
  "id" : "aeiou",
  "issued_count" : 123,
  "created" : "2000-01-23T04:56:07.000+00:00",
  "description" : "aeiou",
  "name" : "aeiou",
  "value" : 123,
  "from_role" : "aeiou",
  "code_prefix" : "aeiou",
  "code_type" : "aeiou"
}, contentType=application/json}]
     
     - parameter id: (path) Unique ID of the user requested 
     - parameter body: (body) CouponType object 

     - returns: RequestBuilder<CouponTypeResponse> 
     */
    open class func updateCouponTypeWithRequestBuilder(id: String, body: CouponTypeUpdateRequest) -> RequestBuilder<CouponTypeResponse> {
        var path = "/coupontype/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = ReffueldAPI.basePath + path
        let parameters = body.encodeToJSON() as? [String:AnyObject]

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CouponTypeResponse>.Type = ReffueldAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true)
    }

}
