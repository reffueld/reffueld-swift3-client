//
// CouponAPI.swift
//
// Generated by swagger-codegen
// https://github.com/swagger-api/swagger-codegen
//

import Alamofire
import PromiseKit



open class CouponAPI: APIBase {
    /**

     - parameter id: (path) Unique ID of the user requested 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func cancelCoupon(id: String, completion: @escaping ((_ data: CouponResponse?,_ error: Error?) -> Void)) {
        cancelCouponWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter id: (path) Unique ID of the user requested 
     - returns: Promise<CouponResponse>
     */
    open class func cancelCoupon( id: String) -> Promise<CouponResponse> {
        let deferred = Promise<CouponResponse>.pending()
        cancelCoupon(id: id) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     - DELETE /coupon/{id}
     - coupon
     - API Key:
       - type: apiKey X-REFFUELD-APIKEY 
       - name: apiKeySecurity
     - examples: [{example={
  "id" : "aeiou",
  "claimed_count" : 123,
  "created" : "2000-01-23T04:56:07.000+00:00",
  "description" : "aeiou",
  "from_user" : {
    "tags" : [ "aeiou" ],
    "enabled" : true,
    "external_id" : "aeiou",
    "id" : "aeiou",
    "balance" : 123,
    "last_transaction" : "2000-01-23T04:56:07.000+00:00",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "email" : "aeiou",
    "last_claim" : "2000-01-23T04:56:07.000+00:00",
    "description" : "aeiou",
    "name" : "aeiou",
    "role" : "aeiou",
    "coupon_count" : 123
  },
  "value" : 123,
  "cancelled" : "2000-01-23T04:56:07.000+00:00",
  "to_user" : "",
  "code" : "aeiou",
  "type" : {
    "tags" : [ "aeiou" ],
    "claim_limit" : 123,
    "to_role" : "aeiou",
    "cancelled" : "2000-01-23T04:56:07.000+00:00",
    "fences" : {
      "type" : "aeiou",
      "coordinates" : [ [ [ 1.3579000000000001069366817318950779736042022705078125 ] ] ]
    },
    "applicability" : "aeiou",
    "reciprocal_value" : 123,
    "expiry" : "2000-01-23T04:56:07.000+00:00",
    "id" : "aeiou",
    "issued_count" : 123,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "description" : "aeiou",
    "name" : "aeiou",
    "value" : 123,
    "from_role" : "aeiou",
    "code_prefix" : "aeiou",
    "code_type" : "aeiou"
  }
}, contentType=application/json}]
     
     - parameter id: (path) Unique ID of the user requested 

     - returns: RequestBuilder<CouponResponse> 
     */
    open class func cancelCouponWithRequestBuilder(id: String) -> RequestBuilder<CouponResponse> {
        var path = "/coupon/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = ReffueldAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CouponResponse>.Type = ReffueldAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter code: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCouponByCode(code: String, completion: @escaping ((_ data: CouponResponse?,_ error: Error?) -> Void)) {
        getCouponByCodeWithRequestBuilder(code: code).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter code: (query)  
     - returns: Promise<CouponResponse>
     */
    open class func getCouponByCode( code: String) -> Promise<CouponResponse> {
        let deferred = Promise<CouponResponse>.pending()
        getCouponByCode(code: code) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     - GET /coupon/
     - coupon
     - API Key:
       - type: apiKey X-REFFUELD-APIKEY 
       - name: apiKeySecurity
     - examples: [{example={
  "id" : "aeiou",
  "claimed_count" : 123,
  "created" : "2000-01-23T04:56:07.000+00:00",
  "description" : "aeiou",
  "from_user" : {
    "tags" : [ "aeiou" ],
    "enabled" : true,
    "external_id" : "aeiou",
    "id" : "aeiou",
    "balance" : 123,
    "last_transaction" : "2000-01-23T04:56:07.000+00:00",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "email" : "aeiou",
    "last_claim" : "2000-01-23T04:56:07.000+00:00",
    "description" : "aeiou",
    "name" : "aeiou",
    "role" : "aeiou",
    "coupon_count" : 123
  },
  "value" : 123,
  "cancelled" : "2000-01-23T04:56:07.000+00:00",
  "to_user" : "",
  "code" : "aeiou",
  "type" : {
    "tags" : [ "aeiou" ],
    "claim_limit" : 123,
    "to_role" : "aeiou",
    "cancelled" : "2000-01-23T04:56:07.000+00:00",
    "fences" : {
      "type" : "aeiou",
      "coordinates" : [ [ [ 1.3579000000000001069366817318950779736042022705078125 ] ] ]
    },
    "applicability" : "aeiou",
    "reciprocal_value" : 123,
    "expiry" : "2000-01-23T04:56:07.000+00:00",
    "id" : "aeiou",
    "issued_count" : 123,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "description" : "aeiou",
    "name" : "aeiou",
    "value" : 123,
    "from_role" : "aeiou",
    "code_prefix" : "aeiou",
    "code_type" : "aeiou"
  }
}, contentType=application/json}]
     
     - parameter code: (query)  

     - returns: RequestBuilder<CouponResponse> 
     */
    open class func getCouponByCodeWithRequestBuilder(code: String) -> RequestBuilder<CouponResponse> {
        let path = "/coupon/"
        let URLString = ReffueldAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "code": code
        ])
        

        let requestBuilder: RequestBuilder<CouponResponse>.Type = ReffueldAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter id: (path) Unique ID of the user requested 
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCouponById(id: String, completion: @escaping ((_ data: CouponResponse?,_ error: Error?) -> Void)) {
        getCouponByIdWithRequestBuilder(id: id).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter id: (path) Unique ID of the user requested 
     - returns: Promise<CouponResponse>
     */
    open class func getCouponById( id: String) -> Promise<CouponResponse> {
        let deferred = Promise<CouponResponse>.pending()
        getCouponById(id: id) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     - GET /coupon/{id}
     - coupon
     - API Key:
       - type: apiKey X-REFFUELD-APIKEY 
       - name: apiKeySecurity
     - examples: [{example={
  "id" : "aeiou",
  "claimed_count" : 123,
  "created" : "2000-01-23T04:56:07.000+00:00",
  "description" : "aeiou",
  "from_user" : {
    "tags" : [ "aeiou" ],
    "enabled" : true,
    "external_id" : "aeiou",
    "id" : "aeiou",
    "balance" : 123,
    "last_transaction" : "2000-01-23T04:56:07.000+00:00",
    "created" : "2000-01-23T04:56:07.000+00:00",
    "email" : "aeiou",
    "last_claim" : "2000-01-23T04:56:07.000+00:00",
    "description" : "aeiou",
    "name" : "aeiou",
    "role" : "aeiou",
    "coupon_count" : 123
  },
  "value" : 123,
  "cancelled" : "2000-01-23T04:56:07.000+00:00",
  "to_user" : "",
  "code" : "aeiou",
  "type" : {
    "tags" : [ "aeiou" ],
    "claim_limit" : 123,
    "to_role" : "aeiou",
    "cancelled" : "2000-01-23T04:56:07.000+00:00",
    "fences" : {
      "type" : "aeiou",
      "coordinates" : [ [ [ 1.3579000000000001069366817318950779736042022705078125 ] ] ]
    },
    "applicability" : "aeiou",
    "reciprocal_value" : 123,
    "expiry" : "2000-01-23T04:56:07.000+00:00",
    "id" : "aeiou",
    "issued_count" : 123,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "description" : "aeiou",
    "name" : "aeiou",
    "value" : 123,
    "from_role" : "aeiou",
    "code_prefix" : "aeiou",
    "code_type" : "aeiou"
  }
}, contentType=application/json}]
     
     - parameter id: (path) Unique ID of the user requested 

     - returns: RequestBuilder<CouponResponse> 
     */
    open class func getCouponByIdWithRequestBuilder(id: String) -> RequestBuilder<CouponResponse> {
        var path = "/coupon/{id}"
        path = path.replacingOccurrences(of: "{id}", with: "\(id)", options: .literal, range: nil)
        let URLString = ReffueldAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)


        let requestBuilder: RequestBuilder<CouponResponse>.Type = ReffueldAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter tag: (query)  (optional)
     - parameter createdBefore: (query)  (optional)
     - parameter createdAfter: (query)  (optional)
     - parameter typeId: (query) Coupon type ID (optional)
     - parameter fromUserId: (query)  (optional)
     - parameter toUserId: (query)  (optional)
     - parameter cancelledBefore: (query)  (optional)
     - parameter cancelledAfter: (query)  (optional)
     - parameter limit: (query) Number of items returned in the list (optional, default to 10)
     - parameter offset: (query) Points to the n-th object in the database to start the returned list with (optional)
     - parameter cursor: (query) A pointer to the first item on the list, returned by the previous query (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func getCoupons(tag: String? = nil, createdBefore: Date? = nil, createdAfter: Date? = nil, typeId: String? = nil, fromUserId: String? = nil, toUserId: String? = nil, cancelledBefore: Date? = nil, cancelledAfter: Date? = nil, limit: Int32? = nil, offset: Int32? = nil, cursor: String? = nil, completion: @escaping ((_ data: CouponListResponse?,_ error: Error?) -> Void)) {
        getCouponsWithRequestBuilder(tag: tag, createdBefore: createdBefore, createdAfter: createdAfter, typeId: typeId, fromUserId: fromUserId, toUserId: toUserId, cancelledBefore: cancelledBefore, cancelledAfter: cancelledAfter, limit: limit, offset: offset, cursor: cursor).execute { (response, error) -> Void in
            completion(response?.body, error);
        }
    }

    /**

     - parameter tag: (query)  (optional)
     - parameter createdBefore: (query)  (optional)
     - parameter createdAfter: (query)  (optional)
     - parameter typeId: (query) Coupon type ID (optional)
     - parameter fromUserId: (query)  (optional)
     - parameter toUserId: (query)  (optional)
     - parameter cancelledBefore: (query)  (optional)
     - parameter cancelledAfter: (query)  (optional)
     - parameter limit: (query) Number of items returned in the list (optional, default to 10)
     - parameter offset: (query) Points to the n-th object in the database to start the returned list with (optional)
     - parameter cursor: (query) A pointer to the first item on the list, returned by the previous query (optional)
     - returns: Promise<CouponListResponse>
     */
    open class func getCoupons( tag: String? = nil,  createdBefore: Date? = nil,  createdAfter: Date? = nil,  typeId: String? = nil,  fromUserId: String? = nil,  toUserId: String? = nil,  cancelledBefore: Date? = nil,  cancelledAfter: Date? = nil,  limit: Int32? = nil,  offset: Int32? = nil,  cursor: String? = nil) -> Promise<CouponListResponse> {
        let deferred = Promise<CouponListResponse>.pending()
        getCoupons(tag: tag, createdBefore: createdBefore, createdAfter: createdAfter, typeId: typeId, fromUserId: fromUserId, toUserId: toUserId, cancelledBefore: cancelledBefore, cancelledAfter: cancelledAfter, limit: limit, offset: offset, cursor: cursor) { data, error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill(data!)
            }
        }
        return deferred.promise
    }

    /**
     - GET /coupon
     - coupon
     - API Key:
       - type: apiKey X-REFFUELD-APIKEY 
       - name: apiKeySecurity
     - examples: [{example={
  "data" : [ {
    "id" : "aeiou",
    "claimed_count" : 123,
    "created" : "2000-01-23T04:56:07.000+00:00",
    "description" : "aeiou",
    "from_user" : {
      "tags" : [ "aeiou" ],
      "enabled" : true,
      "external_id" : "aeiou",
      "id" : "aeiou",
      "balance" : 123,
      "last_transaction" : "2000-01-23T04:56:07.000+00:00",
      "created" : "2000-01-23T04:56:07.000+00:00",
      "email" : "aeiou",
      "last_claim" : "2000-01-23T04:56:07.000+00:00",
      "description" : "aeiou",
      "name" : "aeiou",
      "role" : "aeiou",
      "coupon_count" : 123
    },
    "value" : 123,
    "cancelled" : "2000-01-23T04:56:07.000+00:00",
    "to_user" : "",
    "code" : "aeiou",
    "type" : {
      "tags" : [ "aeiou" ],
      "claim_limit" : 123,
      "to_role" : "aeiou",
      "cancelled" : "2000-01-23T04:56:07.000+00:00",
      "fences" : {
        "type" : "aeiou",
        "coordinates" : [ [ [ 1.3579000000000001069366817318950779736042022705078125 ] ] ]
      },
      "applicability" : "aeiou",
      "reciprocal_value" : 123,
      "expiry" : "2000-01-23T04:56:07.000+00:00",
      "id" : "aeiou",
      "issued_count" : 123,
      "created" : "2000-01-23T04:56:07.000+00:00",
      "description" : "aeiou",
      "name" : "aeiou",
      "value" : 123,
      "from_role" : "aeiou",
      "code_prefix" : "aeiou",
      "code_type" : "aeiou"
    }
  } ],
  "_meta" : {
    "count" : 123,
    "has_more" : true,
    "object" : "aeiou",
    "total_count" : 123
  }
}, contentType=application/json}]
     
     - parameter tag: (query)  (optional)
     - parameter createdBefore: (query)  (optional)
     - parameter createdAfter: (query)  (optional)
     - parameter typeId: (query) Coupon type ID (optional)
     - parameter fromUserId: (query)  (optional)
     - parameter toUserId: (query)  (optional)
     - parameter cancelledBefore: (query)  (optional)
     - parameter cancelledAfter: (query)  (optional)
     - parameter limit: (query) Number of items returned in the list (optional, default to 10)
     - parameter offset: (query) Points to the n-th object in the database to start the returned list with (optional)
     - parameter cursor: (query) A pointer to the first item on the list, returned by the previous query (optional)

     - returns: RequestBuilder<CouponListResponse> 
     */
    open class func getCouponsWithRequestBuilder(tag: String? = nil, createdBefore: Date? = nil, createdAfter: Date? = nil, typeId: String? = nil, fromUserId: String? = nil, toUserId: String? = nil, cancelledBefore: Date? = nil, cancelledAfter: Date? = nil, limit: Int32? = nil, offset: Int32? = nil, cursor: String? = nil) -> RequestBuilder<CouponListResponse> {
        let path = "/coupon"
        let URLString = ReffueldAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "tag": tag, 
            "created_before": createdBefore?.encodeToJSON(), 
            "created_after": createdAfter?.encodeToJSON(), 
            "type_id": typeId, 
            "from_user_id": fromUserId, 
            "to_user_id": toUserId, 
            "cancelled_before": cancelledBefore?.encodeToJSON(), 
            "cancelled_after": cancelledAfter?.encodeToJSON(), 
            "limit": limit?.encodeToJSON(), 
            "offset": offset?.encodeToJSON(), 
            "cursor": cursor
        ])
        

        let requestBuilder: RequestBuilder<CouponListResponse>.Type = ReffueldAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**

     - parameter code: (query)  
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func validateCouponByCode(code: String, completion: @escaping ((_ error: Error?) -> Void)) {
        validateCouponByCodeWithRequestBuilder(code: code).execute { (response, error) -> Void in
            completion(error);
        }
    }

    /**

     - parameter code: (query)  
     - returns: Promise<Void>
     */
    open class func validateCouponByCode( code: String) -> Promise<Void> {
        let deferred = Promise<Void>.pending()
        validateCouponByCode(code: code) { error in
            if let error = error {
                deferred.reject(error)
            } else {
                deferred.fulfill()
            }
        }
        return deferred.promise
    }

    /**
     - HEAD /coupon/
     - coupon
     - API Key:
       - type: apiKey X-REFFUELD-APIKEY 
       - name: apiKeySecurity
     
     - parameter code: (query)  

     - returns: RequestBuilder<Void> 
     */
    open class func validateCouponByCodeWithRequestBuilder(code: String) -> RequestBuilder<Void> {
        let path = "/coupon/"
        let URLString = ReffueldAPI.basePath + path
        let parameters: [String:Any]? = nil

        let url = NSURLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems(values:[
            "code": code
        ])
        

        let requestBuilder: RequestBuilder<Void>.Type = ReffueldAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
